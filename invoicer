#!/usr/bin/env bash

set -Eeuo pipefail

usage () {
    echo "Usage: invoicer [-a|--archived] [check|status|week|next|invoice [week|month]|<arbitrary hledger command line>]"
}

USE_ARCHIVED=false

FILES=( Log.txt )
# If USE_ARCHIVED is true, then include all FILES of format Log_<date>.txt
if $USE_ARCHIVED; then
    FILES+=( Log_*.txt )
fi

basic () {
    local file_args=()
    for f in "${FILES[@]}"; do
        file_args+=(-f "timedot:$f")
    done

    hledger "${file_args[@]}" "$@"
}

bal () {
    basic bal --sort "$@"
}

dd () {
    date -d "$@" +%F
}

# Change s:unbilled to s:billed, but only for entries earlier than the current
# period (week or month).
mark_billed () {
    # Do nothing if there are uncommitted changes to Log.txt
    if ! git diff -q --exit-code "${FILES[@]}"; then
        echo "Uncommitted changes to ${FILES[*]}."
        exit 1
    elif ! check >&/dev/null; then
        echo "Check failed!"
        check
        exit 1
    fi

    local this_period
    if [[ $1 = week ]]; then
        # We know when this week starts because it has a date line equal to or
        # greater than this week's Monday.
        if [[ $(date +%A) = Monday ]]; then
            this_period=$(date +%F)
        else
            this_period=$(dd last-monday)
        fi
    elif [[ $1 = month ]]; then
        this_period=$(date +%Y-%m-01)
    else
        echo "Invalid period: $1"
        exit 1
    fi

    local tmp
    tmp=$(mktemp)

    # shellcheck disable=SC2064
    trap "rm -f '$tmp'" EXIT

    local replace=true
    for file in "${FILES[@]}"; do
        while IFS= read -r line; do
            if [[ $line =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2} ]]; then
                if [[ ! $line < $this_period ]]; then
                    replace=false
                fi
            fi

            if $replace; then
                echo "${line//s:unbilled/s:billed}"
            else
                echo "$line"
            fi
        done < "$file" > "$tmp"
        mv "$tmp" "$file"
    done

    bal --pivot s
}

if [[ ! -f Log.txt ]]; then
    echo "Log.txt not found in current directory."
    exit 1
fi

check () {
    output=$(basic reg not:tag:s=. amt:'>0')
    if [[ -n $output ]]; then
        echo "$output"
        return 1
    fi
}

while :; do
    case ${1:-} in
        -a|--archived)
            USE_ARCHIVED=true
            shift ;;
        --help)
            usage
            exit 0
            ;;
        --) shift; break ;;
        -*)
            echo "Unknown option: $1" >&2;
            usage
            exit 1
            ;;
        *) break ;;
    esac
done
case ${1:-} in
    # Are there any entries that don't have a status? That would be bad!
    check)
        check
        ;;

    # Status as determined by the 's' tag
    status)
        bal --pivot s:acct --tree --sort -WT -b "$(dd '4 weeks ago last monday')"
        ;;

    # Daily view of this week
    week)
        bal --tree --sort -D -b "this week" -T
        ;;

    # Unbilled entries that need to go into the next invoice.
    next)
        echo "All unbilled:"
        bal tag:s=unbilled

        echo
        echo -n "Ending last week: W"
        date +%V -d 'last week'
        bal tag:s=unbilled --end 'this week'

        echo
        echo -n "Ending last month: "
        date +%B -d 'last month'
        bal tag:s=unbilled --end 'this month'
        ;;

    # Mark an invoice as sent
    invoice)
        mark_billed "${2:-week}"
        ;;

    ""|help)
        usage
        ;;

    *)
        basic "$@"
        ;;
esac
