#!/usr/bin/env bash

set -e

#
# Usage: git pull-merge <targetRemote> <pullNumber>
#
# Performs a merge locally, creating a nice merge-commit message out of the PR
# description. No local branches are modified, though you probably should have a
# clean working tree just in case, yeah?
#

if [ $# -ne 2 ]
then
    >&2 echo "Usage: git pull-merge <targetRemote> <pullNumber>"
    exit 1
fi

remote=$1
pullNumber=$2
pullJson=$(mktemp pull.XXXXXXXX.json)
trap "rm -f $pullJson" EXIT

# Two sorts of remote: git@ or https
u=$(git remote get-url $remote)
u=${u##*github.com?}
user=${u%%/*}
repo=${u##*/}
repo=${repo%.git}

curl \
    https://api.github.com/repos/${user}/{$repo}/pulls/${pullNumber} \
    > $pullJson

targetRef=$(jq -r .base.ref $pullJson)
targetBranch=merging-$pullNumber-$(jq -r .base.ref $pullJson)

set -x
git fetch $remote $targetRef
git checkout -b $targetBranch FETCH_HEAD
git fetch $remote refs/pull/$pullNumber/head
set +x

git merge FETCH_HEAD --no-ff -m "$(jq -j .title,'"\n\n"',.body,'"\n\nMerging pull request #"',.number,'" from "',.head.label,'"\n"' < $pullJson)"

fmtd () { echo $@ | fmt -w 65 ; }

echo
echo "------------------------------------------------------------"
echo -e "\e[32mPR #${pullNumber} merged into new local branch \e[1;32m$targetBranch\e[0;32m.\e[0m"
echo
echo "If looks good, you can publish the merge with:"
echo
echo "    git push $remote $targetBranch:$targetRef"
echo
fmtd "Alternatively, check out $targetRef locally, then perform a fast-forward merge before pushing as normal."
echo
fmtd "The branch $targetBranch can be deleted at will."
echo "------------------------------------------------------------"
