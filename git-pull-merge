#!/usr/bin/env bash

set -e

#
# Usage: git merge-pull origin 100
#

remote=$1
pullNumber=$2
pullJson=$(mktemp pull.XXXXXXXX.json)
trap "rm -f $pullJson" EXIT

# Two sorts of remote: git@ or https
u=$(git remote get-url $remote)
u=${u##*github.com?}
user=${u%%/*}
repo=${u##*/}
repo=${repo%.git}

curl \
    https://api.github.com/repos/${user}/{$repo}/pulls/${pullNumber} \
    > $pullJson

targetBranch=$(jq -r .base.ref $pullJson)

set -x
git fetch $remote $targetBranch
git checkout -b merging-$targetBranch $remote/$targetBranch
git fetch $remote refs/pull/$pullNumber/head
set +x

git merge FETCH_HEAD --no-ff -m "$(jq -j .title,'"\n\n"',.body,'"\n\nMerging pull request #"',.number,'" from "',.head.label,'"\n"' < $pullJson)"

echo
echo PR merged into new local branch merging-$targetBranch. If all looks good,
echo you can push this branch to $origin/$targetBranch to publish the merge.
echo
echo Alternatively, check out $targetBranch locally, then perform a fast-forward
echo merge before pushing as normal.
